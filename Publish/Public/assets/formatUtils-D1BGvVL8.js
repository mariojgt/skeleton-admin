const s=r=>r.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),c=r=>{let e=r;return e=e.replace(/```(\w*)([\s\S]*?)```/g,(a,t,l)=>`<div class="bg-[#0F172A] rounded-md p-3 my-3 overflow-x-auto">
      <pre><code class="language-${t||"plaintext"}">${s(l.trim())}</code></pre>
    </div>`),e=e.replace(/`([^`]+)`/g,"<code>$1</code>"),e=e.replace(/^### (.*$)/gm,'<h3 class="text-lg font-bold mt-4 mb-2">$1</h3>'),e=e.replace(/^## (.*$)/gm,'<h2 class="text-xl font-bold mt-5 mb-2">$1</h2>'),e=e.replace(/^# (.*$)/gm,'<h1 class="text-2xl font-bold mt-6 mb-3">$1</h1>'),e=e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>"),e=e.replace(/\*(.*?)\*/g,"<em>$1</em>"),e=e.replace(/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="$2" class="text-blue-400 hover:underline" target="_blank">$1</a>'),e=e.replace(/\n/g,"<br>"),e=e.replace(/<br>- (.*?)(?=<br>|$)/g,"<br>â€¢ $1"),e},n=r=>{r=r.replace("#",""),r.length===3&&(r=r[0]+r[0]+r[1]+r[1]+r[2]+r[2]);const e=parseInt(r.substring(0,2),16),a=parseInt(r.substring(2,4),16),t=parseInt(r.substring(4,6),16);return isNaN(e)||isNaN(a)||isNaN(t)?"128, 128, 128":`${e}, ${a}, ${t}`};export{s as e,c as f,n as h};
